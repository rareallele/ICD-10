if (c %in% c("place_code", "activity_code")){
if (!is.na(df[row, c]) & str_length(df[row, c]) > 1){
# Keep only the single digit codes
df[row, c] = NA
}
}
# For all other columns
else {
df[row, c] = toupper(df[row, c])
# If code not valid
if (!is.na(df[row, c]) & !df[row, c] %in% valid_codes){
og_non_matches[nrow(og_non_matches)+1,] = c(df[row,"case_number"], c, df[row,c])
# If last character is a letter, remove it
if (length(grep("[A-Z]", str_sub(df[row, c], -1, -1)))==1){
code = str_sub(df[row, c], 1, -2)
}
# If code has 4+ digits
else if (str_length(code) > 3){
# If code is missing decimal after 3rd character
if (!str_detect(code, "\\.")){
# Add decimal after 3rd character
code <- paste0(str_sub(code, 1, 3), ".", str_sub(code, 4, -1))
}
}
# If first character is not a letter, delete code
else if (length(grep("[A-Z]", substr(code, 1, 1)))==0){
deleted_codes = append(deleted_codes, df[row, c])
df[row, c] <- NA
}
}
# Start check again
if (!code %in% valid_codes){
# If code has more than 5 characters (including the decimal)
if (str_length(code) > 5){
code = substr(code, 1, 5)
}
}
# If still not a valid code
if (!code %in% valid_codes){
# Pull back to 3 characters
code <- str_sub(df[row, c], 1, 3)
}
df[row, c] = code
# # Delete remaining codes that have only 2 characters
# if (str_length(df[row, c]) == 2 & !is.na(df[row, c])){
#   df[row, c] <- as.character(NA)
# }
# Pull invalid codes
# If code not valid
if (!is.na(code) & !code %in% valid_codes){
# Add to non_matches
non_matches[nrow(non_matches)+1,] = c(df[row,"case_number"], c, og[row,c], code)
}
}
}
}
#return(list(df, non_matches))
return(df)
}
data_cleaned <- icd_clean(data, cols)
View(data_cleaned)
View(deleted_codes)
View(deleted_codes)
deleted_codes
# Function to process ICD-10 codes
icd_clean <- function(data, columns){
# Identify non-matches
# non_matches <- filter(data,
#                       !Code %in% valid_codes)[["Code"]]
df = data
og = data
non_matches = data.frame("case_number","column","original","cleaned")
deleted_codes = c()
og_non_matches = data.frame("case_number","column","code")
# For each ICD-10 column
for (c in columns){
# For each row
for (row in 1:nrow(df)){
code = df[row, c]
# Place and activity codes
if (c %in% c("place_code", "activity_code")){
if (!is.na(df[row, c]) & str_length(df[row, c]) > 1){
# Keep only the single digit codes
df[row, c] = NA
}
}
# For all other columns
else {
df[row, c] = toupper(df[row, c])
# If code not valid
if (!is.na(df[row, c]) & !df[row, c] %in% valid_codes){
og_non_matches[nrow(og_non_matches)+1,] = c(df[row,"case_number"], c, df[row,c])
# If last character is a letter, remove it
if (length(grep("[A-Z]", str_sub(df[row, c], -1, -1)))==1){
code = str_sub(df[row, c], 1, -2)
}
# If code has 4+ digits
else if (str_length(code) > 3){
# If code is missing decimal after 3rd character
if (!str_detect(code, "\\.")){
# Add decimal after 3rd character
code <- paste0(str_sub(code, 1, 3), ".", str_sub(code, 4, -1))
}
}
# # If first character is not a letter, delete code
# else if (length(grep("[A-Z]", substr(code, 1, 1)))==0){
#   deleted_codes = append(deleted_codes, df[row, c])
#   df[row, c] <- NA
# }
}
# Start check again
if (!code %in% valid_codes){
# If code has more than 5 characters (including the decimal)
if (str_length(code) > 5){
code = substr(code, 1, 5)
}
}
# If still not a valid code
if (!code %in% valid_codes){
# Pull back to 3 characters
code <- str_sub(df[row, c], 1, 3)
}
df[row, c] = code
# # Delete remaining codes that have only 2 characters
# if (str_length(df[row, c]) == 2 & !is.na(df[row, c])){
#   df[row, c] <- as.character(NA)
# }
# Pull invalid codes
# If code not valid
if (!is.na(code) & !code %in% valid_codes){
# Add to non_matches
non_matches[nrow(non_matches)+1,] = c(df[row,"case_number"], c, og[row,c], code)
}
}
}
}
#return(list(df, non_matches))
return(non_matches)
}
non_matches = icd_clean(data, cols)
View(non_matches)
test = data.frame("case_number","column","original","cleaned")
View(test)
test = data.frame("case_number"=c(),"column"=c(),"original"=c(),"cleaned"=c())
View(test)
test[1,] = c(1,1,1,1)
test = data.frame("case_number"=integer(),"column"=character(),"original"=character(),"cleaned"=character())
View(test)
# Function to process ICD-10 codes
icd_clean <- function(data, columns){
# Identify non-matches
# non_matches <- filter(data,
#                       !Code %in% valid_codes)[["Code"]]
df = data
og = data
non_matches = data.frame("case_number"=integer(),"column"=character(),"original"=character(),"cleaned"=character())
deleted_codes = c()
og_non_matches = data.frame("case_number"=integer(),"column"=character(),"code"=character())
# For each ICD-10 column
for (c in columns){
# For each row
for (row in 1:nrow(df)){
code = df[row, c]
# Place and activity codes
if (c %in% c("place_code", "activity_code")){
if (!is.na(df[row, c]) & str_length(df[row, c]) > 1){
# Keep only the single digit codes
df[row, c] = NA
}
}
# For all other columns
else {
df[row, c] = toupper(df[row, c])
# If code not valid
if (!is.na(df[row, c]) & !df[row, c] %in% valid_codes){
og_non_matches[nrow(og_non_matches)+1,] = c(df[row,"case_number"], c, df[row,c])
# If last character is a letter, remove it
if (length(grep("[A-Z]", str_sub(df[row, c], -1, -1)))==1){
code = str_sub(df[row, c], 1, -2)
}
# If code has 4+ digits
else if (str_length(code) > 3){
# If code is missing decimal after 3rd character
if (!str_detect(code, "\\.")){
# Add decimal after 3rd character
code <- paste0(str_sub(code, 1, 3), ".", str_sub(code, 4, -1))
}
}
# # If first character is not a letter, delete code
# else if (length(grep("[A-Z]", substr(code, 1, 1)))==0){
#   deleted_codes = append(deleted_codes, df[row, c])
#   df[row, c] <- NA
# }
}
# Start check again
if (!code %in% valid_codes){
# If code has more than 5 characters (including the decimal)
if (str_length(code) > 5){
code = substr(code, 1, 5)
}
}
# If still not a valid code
if (!code %in% valid_codes){
# Pull back to 3 characters
code <- str_sub(df[row, c], 1, 3)
}
df[row, c] = code
# # Delete remaining codes that have only 2 characters
# if (str_length(df[row, c]) == 2 & !is.na(df[row, c])){
#   df[row, c] <- as.character(NA)
# }
# Pull invalid codes
# If code not valid
if (!is.na(code) & !code %in% valid_codes){
# Add to non_matches
non_matches[nrow(non_matches)+1,] = c(df[row,"case_number"], c, og[row,c], code)
}
}
}
}
#return(list(df, non_matches))
return(non_matches)
}
View(og_non_matches)
View(non_matches)
library(odbc)
install.packages("odbc")
install.packages("DBI")
library(DBI)
#Import data
CDR_query <- read_file("C:\\Users\\jagvan\\OneDrive - South Australia Government\\Code\\SQL Server Management Studio\\Queries\\REDCap\\icd10.sql")
con <- dbConnect(odbc(), "CDR-DSN")
library(odbc)
con <- dbConnect(odbc(), "CDR-DSN")
CDR_Case
CDR_Case <- dbGetQuery(con,
CDR_query)
View(CDR_Case)
non_matches = icd_clean(data, cols)
View(non_matches)
#Import data
CDR_query <- read_file("C:\\Users\\jagvan\\OneDrive - South Australia Government\\Code\\SQL Server Management Studio\\Queries\\REDCap\\icd10.sql")
con <- dbConnect(odbc(), "CDR-DSN")
data <- dbGetQuery(con,
CDR_query)
# Function to process ICD-10 codes
icd_clean <- function(data, columns){
# Identify non-matches
# non_matches <- filter(data,
#                       !Code %in% valid_codes)[["Code"]]
df = data
og = data
non_matches = data.frame("case_number"=integer(),"column"=character(),"original"=character(),"cleaned"=character())
deleted_codes = c()
og_non_matches = data.frame("case_number"=integer(),"column"=character(),"code"=character())
# For each ICD-10 column
for (c in columns){
# For each row
for (row in 1:nrow(df)){
code = df[row, c]
# Place and activity codes
if (c %in% c("place_code", "activity_code")){
if (!is.na(df[row, c]) & str_length(df[row, c]) > 1){
# Keep only the single digit codes
df[row, c] = NA
}
}
# For all other columns
else {
df[row, c] = toupper(df[row, c])
# If code not valid
if (!is.na(df[row, c]) & !df[row, c] %in% valid_codes){
og_non_matches[nrow(og_non_matches)+1,] = c(df[row,"case_number"], c, df[row,c])
# If last character is a letter, remove it
if (length(grep("[A-Z]", str_sub(df[row, c], -1, -1)))==1){
code = str_sub(df[row, c], 1, -2)
}
# If code has 4+ digits
else if (str_length(code) > 3){
# If code is missing decimal after 3rd character
if (!str_detect(code, "\\.")){
# Add decimal after 3rd character
code <- paste0(str_sub(code, 1, 3), ".", str_sub(code, 4, -1))
}
}
# # If first character is not a letter, delete code
# else if (length(grep("[A-Z]", substr(code, 1, 1)))==0){
#   deleted_codes = append(deleted_codes, df[row, c])
#   df[row, c] <- NA
# }
}
# Start check again
if (!code %in% valid_codes){
# If code has more than 5 characters (including the decimal)
if (str_length(code) > 5){
code = substr(code, 1, 5)
}
}
# If still not a valid code
if (!code %in% valid_codes){
# Pull back to 3 characters
code <- str_sub(df[row, c], 1, 3)
}
df[row, c] = code
# # Delete remaining codes that have only 2 characters
# if (str_length(df[row, c]) == 2 & !is.na(df[row, c])){
#   df[row, c] <- as.character(NA)
# }
# Pull invalid codes
# If code not valid
if (!is.na(code) & !code %in% valid_codes){
# Add to non_matches
non_matches[nrow(non_matches)+1,] = c(df[row,"case_number"], c, og[row,c], code)
}
}
}
}
#return(list(df, non_matches))
return(non_matches)
}
non_matches = icd_clean(data, cols)
View(non_matches)
# Function to process ICD-10 codes
icd_clean <- function(data, columns){
# Identify non-matches
# non_matches <- filter(data,
#                       !Code %in% valid_codes)[["Code"]]
df = data
og = data
non_matches = data.frame("case_number"=integer(),"column"=character(),"original"=character(),"cleaned"=character())
deleted_codes = c()
og_non_matches = data.frame("case_number"=integer(),"column"=character(),"code"=character())
# For each ICD-10 column
for (c in columns){
# For each row
for (row in 1:nrow(df)){
code = df[row, c]
# Place and activity codes
if (c %in% c("place_code", "activity_code")){
if (!is.na(df[row, c]) & str_length(df[row, c]) > 1){
# Keep only the single digit codes
df[row, c] = NA
}
}
# For all other columns
else {
df[row, c] = toupper(df[row, c])
# If code not valid
if (!is.na(df[row, c]) & !df[row, c] %in% valid_codes){
og_non_matches[nrow(og_non_matches)+1,] = c(df[row,"case_number"], c, df[row,c])
# If last character is a letter, remove it
if (length(grep("[A-Z]", str_sub(df[row, c], -1, -1)))==1){
code = str_sub(df[row, c], 1, -2)
}
# If code has 4+ digits
else if (str_length(code) > 3){
# If code is missing decimal after 3rd character
if (!str_detect(code, "\\.")){
# Add decimal after 3rd character
code <- paste0(str_sub(code, 1, 3), ".", str_sub(code, 4, -1))
}
}
# # If first character is not a letter, delete code
# else if (length(grep("[A-Z]", substr(code, 1, 1)))==0){
#   deleted_codes = append(deleted_codes, df[row, c])
#   df[row, c] <- NA
# }
}
# Start check again
if (!code %in% valid_codes){
# If code has more than 5 characters (including the decimal)
if (str_length(code) > 5){
code = substr(code, 1, 5)
}
}
# If still not a valid code
if (!code %in% valid_codes){
# Pull back to 3 characters
code <- str_sub(df[row, c], 1, 3)
}
df[row, c] = code
# # Delete remaining codes that have only 2 characters
# if (str_length(df[row, c]) == 2 & !is.na(df[row, c])){
#   df[row, c] <- as.character(NA)
# }
# Pull invalid codes
# If code not valid
if (!is.na(code) & !code %in% valid_codes){
# Add to non_matches
non_matches[nrow(non_matches)+1,] = c(df[row,"case_number"], c, og[row,c], code)
df[row, c] = NA
}
}
}
}
#return(list(df, non_matches))
return(df)
}
data_cleaned <- icd_clean(data, cols)
View(data_cleaned)
write_csv(data_cleaned, "C:\\Users\\jagvan\\OneDrive - South Australia Government\\Code\\REDCap\\Data-merge\\Data\\icd_cleaned_190522.csv")
write_csv(data_cleaned, "C:\\Users\\jagvan\\OneDrive - South Australia Government\\Code\\REDCap\\Data-merge\\Data\\icd_cleaned_190522.csv")
write_csv(data_cleaned, "icd_cleaned_190522.csv")
write_csv(data_cleaned, "icd_cleaned_190522.csv", na = "")
write_delim(data_cleaned, "icd_cleaned_190522.csv", na = "", delim = "|")
View(data_cleaned)
#-----------------------------------------------------------------------------
# Execute
#Import data
CDR_query <- read_file("C:\\Users\\jagvan\\OneDrive - South Australia Government\\Code\\SQL Server Management Studio\\Queries\\REDCap\\icd10.sql")
con <- dbConnect(odbc(), "CDR-DSN")
data <- dbGetQuery(con, CDR_query)
cols = colnames(data[-1:-3])
data_cleaned <- icd_clean(data, cols)
View(data)
View(data_cleaned)
write_delim(data_cleaned, "icd_cleaned_190522.csv", na = "", delim = "|")
View(data_cleaned)
seq(0,9)
"0" %in% seq(0,9)
"9" %in% seq(0,9)
"19" %in% seq(0,9)
# Function to process ICD-10 codes
icd_clean <- function(data, columns){
# Identify non-matches
# non_matches <- filter(data,
#                       !Code %in% valid_codes)[["Code"]]
df = data
og = data
non_matches = data.frame("case_number"=integer(),"column"=character(),"original"=character(),"cleaned"=character())
deleted_codes = c()
og_non_matches = data.frame("case_number"=integer(),"column"=character(),"code"=character())
# For each ICD-10 column
for (c in columns){
# For each row
for (row in 1:nrow(df)){
code = df[row, c]
# Placecodes
if (c == "place_code"){
if (str_length(df[row, c]) > 1 | !df[row, c] %in% seq(0,9)){
# Keep only the single digit codes
df[row, c] = NA
}
}
# Place and activity codes
if (c == "activity_code"){
if (str_length(df[row, c]) > 1 | !df[row, c] %in% c(0,1,2,3,4,8,9)){
# Keep only the single digit codes
df[row, c] = NA
}
}
# For all other columns
else {
df[row, c] = toupper(df[row, c])
# If code not valid
if (!is.na(df[row, c]) & !df[row, c] %in% valid_codes){
og_non_matches[nrow(og_non_matches)+1,] = c(df[row,"case_number"], c, df[row,c])
# If last character is a letter, remove it
if (length(grep("[A-Z]", str_sub(df[row, c], -1, -1)))==1){
code = str_sub(df[row, c], 1, -2)
}
# If code has 4+ digits
else if (str_length(code) > 3){
# If code is missing decimal after 3rd character
if (!str_detect(code, "\\.")){
# Add decimal after 3rd character
code <- paste0(str_sub(code, 1, 3), ".", str_sub(code, 4, -1))
}
}
# # If first character is not a letter, delete code
# else if (length(grep("[A-Z]", substr(code, 1, 1)))==0){
#   deleted_codes = append(deleted_codes, df[row, c])
#   df[row, c] <- NA
# }
}
# Start check again
if (!code %in% valid_codes){
# If code has more than 5 characters (including the decimal)
if (str_length(code) > 5){
code = substr(code, 1, 5)
}
}
# If still not a valid code
if (!code %in% valid_codes){
# Pull back to 3 characters
code <- str_sub(df[row, c], 1, 3)
}
df[row, c] = code
# # Delete remaining codes that have only 2 characters
# if (str_length(df[row, c]) == 2 & !is.na(df[row, c])){
#   df[row, c] <- as.character(NA)
# }
# Pull invalid codes
# If code not valid
if (!is.na(code) & !code %in% valid_codes){
# Add to non_matches
non_matches[nrow(non_matches)+1,] = c(df[row,"case_number"], c, og[row,c], code)
df[row, c] = NA
}
}
}
}
#return(list(df, non_matches))
return(df)
}
data_cleaned <- icd_clean(data, cols)
write_delim(data_cleaned, "icd_cleaned_190522.csv", na = "", delim = "|")
test = filter(data, str_length(underlying_cod) > 5)
View(test)
test = filter(data_cleaned, str_length(underlying_cod) > 5)
valid_codes
View(og_non_matches)
